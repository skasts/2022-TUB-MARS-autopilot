import os
import launch
import math

from launch_ros.actions import Node
from ament_index_python.packages import get_package_share_directory
from launch.conditions import IfCondition, UnlessCondition
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import LaunchConfiguration, PythonExpression
from nav2_common.launch import RewrittenYaml

def generate_launch_description():
    # Create launch description object
    ld = launch.LaunchDescription()

    # Get launch directories
    autopilot_dir = get_package_share_directory('autopilot')
    slam_toolbox_dir = get_package_share_directory('slam_toolbox')

    # Create launch configuration variables
    rviz_config_file = LaunchConfiguration('rviz_config_file')
    params_file = LaunchConfiguration('params_file')
    bt_xml_file = LaunchConfiguration('bt_xml_file')
    map_subscribe_transient_local = LaunchConfiguration('map_subscribe_transient_local')
    use_sim_time = LaunchConfiguration("use_sim_time")
    headless = LaunchConfiguration("headless")
    use_rviz = LaunchConfiguration("use_rviz")

    declare_use_sim_time_cmd = DeclareLaunchArgument(name="use_sim_time", default_value="True")
    declare_headless_cmd = DeclareLaunchArgument(name="headless", default_value="False")
    declare_rviz_config_file_cmd = DeclareLaunchArgument('rviz_config_file',default_value=os.path.join(autopilot_dir, 'config/default_view.rviz'))
    declare_params_file_cmd = DeclareLaunchArgument('params_file',default_value=os.path.join(autopilot_dir, 'config', 'params.yaml'))
    declare_bt_xml_file_cmd = DeclareLaunchArgument('bt_xml_file',default_value=os.path.join(autopilot_dir, 'behavior_trees', 'navigate_w_replanning_time.xml'))
    declare_map_subscribe_transient_local_cmd = DeclareLaunchArgument('map_subscribe_transient_local',default_value='True')
    declare_use_rviz_cmd = DeclareLaunchArgument('use_rviz',default_value='False')

    # Create our own temporary YAML files that include substitutions
    param_substitutions = {
        'default_bt_xml_filename': bt_xml_file,
        'map_subscribe_transient_local': map_subscribe_transient_local}

    # Rewrite params YAML to reflect given parameters
    configured_params = RewrittenYaml(
        source_file=params_file,
        param_rewrites=param_substitutions,
        convert_types=True)

    # Start Robot Field Event Gazebo Simulation
    gazebo_simulation_cmd = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(get_package_share_directory("virtual_maize_field") + "/launch/simulation.launch.py"),
        launch_arguments={"headless": headless}.items())

    # Publish robot states
    publish_states_cmd = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(get_package_share_directory("jackal_custom") + "/launch/robot_state_publisher.launch.py"),
        launch_arguments={"use_sim_time": use_sim_time}.items())

    # Spawn robot in Gazebo simulation
    spawn_robot_cmd = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(get_package_share_directory("jackal_custom") + "/launch/spawn_robot.launch.py"),
        launch_arguments={
            "name" : 'robot',
            "x" : '1.94',
            "y" : '-3.44',
            # "x" : '2.0',
            # "y" : '-2.8',
            "z" : '0.00',
            "yaw" : '1.587'
        }.items())
    # # Spawn robot in Gazebo simulation
    # This uses the spawn launch file that is generated by virtual maize field. Problem: This uses
    # the robot description from a topic (based on the URDF-file). The URDF file does not contain
    # all the necessary Gazebo parameters though. Therefore, we use the spawn entity node from 
    # Gazebo that accepts a SDF-file. 
    # TODO: We should have a URDF file that also contains the Gazebo information and then use this
    #       spawn method
    # spawn_robot_cmd = IncludeLaunchDescription(
    #     PythonLaunchDescriptionSource(get_package_share_directory("virtual_maize_field") + "/launch/robot_spawner.launch.py"),
    #     launch_arguments={"robot_name" : 'robot'}.items())

    # Slam
    start_slam_toolbox_cmd = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(os.path.join(slam_toolbox_dir, 'launch', 'online_sync_launch.py')),
        launch_arguments={'params_file': configured_params}.items())

    # RViz
    rviz_cmd = Node(
        condition=IfCondition(use_rviz),
        package='rviz2',
        executable='rviz2',
        name='rviz2',
        arguments=['-d', rviz_config_file],
        output='screen')

    # -------------------------------- Nav2 stuff ----------------------------------

    # (Nav2-) Nodes to be controlled by lifecycle manager 
    lifecycle_nodes = ['controller_server',
                       'planner_server',
                       'recoveries_server',
                       'bt_navigator',
                       'waypoint_follower']

    # Nav2 controller, does local planning
    nav2_controller_cmd = Node(
        package='nav2_controller',
        executable='controller_server',
        output='screen',
        parameters=[configured_params])

    # Nav2 planner, does global planning
    nav2_planner_cmd = Node(
        package='nav2_planner',
        executable='planner_server',
        name='planner_server',
        output='screen',
        parameters=[configured_params])

    # Nav2 recoveries, defines what to do when navigation fails
    nav2_recoveries_cmd = Node(
        package='nav2_recoveries',
        executable='recoveries_server',
        name='recoveries_server',
        output='screen',
        parameters=[configured_params])

    # Nav2 behavior tree navigator. The behavior tree does the mission planning
    nav2_bt_navigator_cmd = Node(
        package='nav2_bt_navigator',
        executable='bt_navigator',
        name='bt_navigator',
        output='screen',
        parameters=[configured_params])

    # Nav2 waypoint follower. I.e. we use this when passing goal poses via RViz
    nav2_waypoint_follower_cmd = Node(
        package='nav2_waypoint_follower',
        executable='waypoint_follower',
        name='waypoint_follower',
        output='screen',
        parameters=[configured_params])

    # Nav2 lifecycle manager that manages the nodes lifecycle (startup, activation, ...)
    nav2_lifecycle_manager_cmd = Node(
        package='nav2_lifecycle_manager',
        executable='lifecycle_manager',
        name='lifecycle_manager_navigation',
        output='screen',
        parameters=[{'use_sim_time': use_sim_time},
                    {'autostart': True},
                    {'node_names': lifecycle_nodes}])

    ############################
    ## Declare launch options ##
    ############################

    # Arguments
    ld.add_action(declare_bt_xml_file_cmd)
    ld.add_action(declare_params_file_cmd)
    ld.add_action(declare_rviz_config_file_cmd)
    ld.add_action(declare_map_subscribe_transient_local_cmd)
    ld.add_action(declare_use_rviz_cmd)
    ld.add_action(declare_use_sim_time_cmd)
    ld.add_action(declare_headless_cmd)

    # Included launch files
    ld.add_action(gazebo_simulation_cmd)
    ld.add_action(publish_states_cmd)
    ld.add_action(spawn_robot_cmd)
    ld.add_action(start_slam_toolbox_cmd)

    # Nav2 nodes
    ld.add_action(nav2_controller_cmd)
    ld.add_action(nav2_planner_cmd)
    ld.add_action(nav2_recoveries_cmd)
    ld.add_action(nav2_bt_navigator_cmd)
    ld.add_action(nav2_waypoint_follower_cmd)
    ld.add_action(nav2_lifecycle_manager_cmd)

    # RViz
    ld.add_action(rviz_cmd) 

    return ld